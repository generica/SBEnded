#!/usr/bin/env python

'''
Parse a sickbeard sqlite file and check for any ended shows
now marked as continuing on thetvdb

Written by Brett Pemberton, brett@whatevz.net
Copyright (C) 2011

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

'''

import sys
import argparse
import os
import sqlite3
import logging
import tvdb_api
import tvdb_exceptions


def check_shows(show_list):
    ''' Take a list of shows to check on tvdb, and return those that
        need fixing
    '''

    mismatched = []
    tvdb_conn = tvdb_api.Tvdb()

    for (tvdb_id, show_name, status) in show_list:
        LOG.debug("Checking %s ", show_name)
        try:
            show = tvdb_conn[show_name]
            show_id = show['id']
        except tvdb_exceptions.tvdb_shownotfound:
            LOG.warn("Warning: Couldn't find show %s on tvdb", show_name)
            continue
        except:
            LOG.warn("Unknown error with show %s", show_name)
            continue
        if int(tvdb_id) != int(show_id):
            LOG.error("Warning: Issue matching %s on tvdb. Got %s and %s",
                      show_name, tvdb_id, show_id)
        else:
            show_status = show['status']
            if show_status != status:
                LOG.error("Show %s with local status %s is now %s on thetvdb",
                          show_name, status, show_status)
                mismatched.append(show_id)
            else:
                LOG.debug("Local status matches thetvdb: %s", status)

    return mismatched


def read_sickbeard_sqlite_file(sqlite_file):
    ''' Read all shows from the sqlite file
    '''

    conn = sqlite3.connect(sqlite_file)
    cur = conn.cursor()
    try:
        cur.execute("SELECT tvdb_id,show_name,status FROM tv_shows WHERE status != 'Continuing' ORDER BY show_name")
    except sqlite3.DatabaseError:
        LOG.error("ERROR: Not a SickBeard sqlite file")
        sys.exit(-1)
    our_shows = cur.fetchall()

    conn.close()

    return our_shows


def update_sickbeard_sqlite_file(sqlite_file, update_shows):
    ''' Update the status of local sqlite file for some shows
    '''

    conn = sqlite3.connect(sqlite_file)
    cur = conn.cursor()
    for show in update_shows:
        cur.execute("update tv_shows set status = 'Continuing' where tvdb_id = %s" % show)

    conn.commit()
    conn.close()


def main():
    ''' Do some work
    '''

    args = parse_args()

    if args.verbose:
        LOG.setLevel(logging.DEBUG)
    else:
        LOG.setLevel(logging.INFO)

    if not os.path.isfile(args.sqlite_file):
        LOG.error("ERROR: %s is not a file", args.sqlite_file)
        sys.exit(-1)

    shows = read_sickbeard_sqlite_file(args.sqlite_file)
    to_fix = check_shows(shows)

    if args.fix_local:
        update_sickbeard_sqlite_file(args.sqlite_file, to_fix)


def parse_args():
    ''' See what we're wanting to do
    '''

    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--sqlite-file', help='Sickbeard SQLite file to use',
                        required=True, action='store')
    parser.add_argument('-f', '--fix-local', help='Fix local status when necessary',
                        action='store_true')
    parser.add_argument('-v', '--verbose', help='Increase verbosity', action='store_true')

    return parser.parse_args()


if __name__ == "__main__":

    LOG = logging.getLogger('SBEnded')
    LOG.addHandler(logging.StreamHandler())

    main()
